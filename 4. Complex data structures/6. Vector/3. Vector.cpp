//Вектор
//В этой задаче вам надо будет научиться пользоваться стандартными операциями с вектором.
//
//Входные данные
//В первой строке входных данных содержится единственное целое число n - количество запросов.
//
//В следующих n строках записаны запросы, по одному в строке. Первое число в каждом запросе это число t - обозначающий тип запроса. Далее, в зависимости от типа следуют параметры запроса:
//
//Выполнить функцию resize(n). В таком случае записано еще одно целое число n.
//Выполнить функцию assign(n, val). В таком случае записано еще два целых числа n, val.
//Очистить вектор. В таком случае больше ничего не записано.
//Вывести на экран i-й элемент. В таком случае записано еще одно целое число i. Если i выходит за границы вектора, выведите "Out of bounds".
//Вывести на экран размер вектора. В таком случае больше ничего не записано.
//Добавить число val в конец вектора. В таком случае записано еще одно число val.
//Удалить последний элемент вектора. В таком случае больше ничего не записано. Если вектор пуст, ничего делать не надо.
//Удалить i-й элемент вектора. В таком случае записано еще одно число i. Если i выходит за границы вектора, ничего делать не надо.
//Добавить число val после i-о элемента. В таком случае записано еще два числа i, val. Гарантируется, что этот запрос корректен.
//Вывести последний элемент вектора. В таком случае больше ничего не записано. Если вектор пуст, выведите "empty".
//Все числа во входных данных целые.
//
//Выходные данные
//Выведите ответы на 4, 5 и 10 запросы, ответ на каждый запрос следует выводить в отдельной строке.
//
//Sample Input:
//22
//2 5 4
//1 7
//4 3
//4 4
//4 5
//4 6
//4 7
//6 3
//6 7
//7
//5
//4 4
//8 2
//4 4
//9 2 7
//4 1
//4 2
//4 3
//4 4
//10
//3
//10
//
//Sample Output:
//4
//4
//0
//0
//Out of bounds
//8
//4
//0
//4
//4
//7
//4
//3
//empty

#include <vector>
#include <iostream>

using namespace std;

int main()
{
    int n;
    vector<int> v;
    cin >> n;

    for (int i = 0; i < n; ++i)
    {
        short t;
        cin >> t;

        if (t == 1) {
            int n;
            cin >> n;
            v.resize(n);
        }
        if (t == 2) {
            int n, val;
            cin >> n >> val;
            v.assign(n, val);
        }
        if (t == 3) {
            v.clear();
        }
        if (t == 4) {
            int i;
            cin >> i;
            if ((i < 0) || (i >= v.size()))
                cout << "Out of bounds" << endl;
            else
                cout << v[i] << endl;
        }
        if (t == 5) {
            cout << v.size() << endl;
        }
        if (t == 6) {
            int val;
            cin >> val;
            v.push_back(val);
        }
        if (t == 7) {
            if (v.size() > 0)
                v.pop_back();
        }
        if (t == 8) {
            int i;
            cin >> i;
            if ((i >= 0) && (i < v.size()))
                v.erase(v.begin() + i);
        }
        if (t == 9) {
            int i, val;
            cin >> i >> val;
            v.emplace(v.begin() + i + 1, val);
        }
        if (t == 10) {
            if (v.empty())
                cout << "empty" << endl;
            else
                cout << v.back() << endl;
        }
    }
}