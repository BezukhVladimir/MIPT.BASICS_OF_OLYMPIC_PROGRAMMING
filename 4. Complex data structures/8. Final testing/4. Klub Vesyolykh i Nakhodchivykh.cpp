//Веселый КВН
//Вы - организатор КВН, отвечающий за составление списка игроков, прошедших в следующий тур. Всего на прошедшем туре было пять номинаций - уровень юмора, уровень смеха, уровень забавности, уровень команды и степень зрительских симпатий. Для определения списка команд, прошедших в следующий этап организаторы суммируют баллы по всем номинациям и выбирают из них k лучших. Если несколько команд набрали одинаковое количество баллов, то лучшими считаются те, у которых более красивое название. У вас свои стандарты красоты, поэтому название тем больше красиво, чем меньше лексикографически.
//
//Вам необходимо реализовать часть программы, которая определяет список финалистов и выводит их на экран в порядке убывания красоты названия. Гарантируется, что все названия различны.
//
//Техническая часть
//Вам необходимо реализовать структуру team, у которой есть конструктор, принимающий 6 аргументов: название команды - строка, состоящая из латинских букв; и 5 целых чисел - очки команды за каждую номинацию.
//
//Помимо этого вам необходимо реализовать функцию to_final, приминающую вектор, содержащий экземпляры team и число k - количество финалистов. Эта функция должна вывести список команд, прошедших в финал в порядке убывания красоты названий. Для каждой команды следует в отдельной строке вывести ее название и баллы по каждой из номинаций. Гарантируется, что размер вектора не превосходит 500.
//
//Sample Input:
//6 4
//Vlad 1 2 3 4 5
//AbrakadabrA 5 4 3 2 1
//WINNER 100500 0 0 0 0
//LOOSER -100 -100 -100 -100 1
//middle 0 0 0 0 0
//Adramalikh 0 0 0 0 0
//
//Sample Output:
//AbrakadabrA 5 4 3 2 1
//Adramalikh 0 0 0 0 0
//Vlad 1 2 3 4 5
//WINNER 100500 0 0 0 0

struct team
{
    string s;
    long long a1, a2, a3, a4, a5;

    team(string s, long long a1, long long a2, long long a3, long long a4, long long a5)
            :s(s), a1(a1), a2(a2), a3(a3), a4(a4), a5(a5) {}
};

void swap(team &a, team &b)
{
    team t = a;
    a = b;
    b = t;
}

void to_final(vector<team> v, int k)
{
    for (int i = 0; i < v.size(); ++i) {
        for (int j = 0; j < v.size() - (i + 1); ++j) {
            long long l1, l2;
            l1 = v[j].a1 + v[j].a2 + v[j].a3 + v[j].a4 + v[j].a5;
            l2 = v[j + 1].a1 + v[j + 1].a2 + v[j + 1].a3 + v[j + 1].a4 + v[j + 1].a5;

            if (l1 < l2) {
                swap(v[j], v[j + 1]);
            }
            if (l1 == l2) {
                if (v[j].s > v[j + 1].s) {
                    swap(v[j], v[j + 1]);
                }
            }
        }
    }

    for (int i = 0; i < k; ++i) {
        for (int j = 0; j < k - 1; ++j) {
            if (v[j].s > v[j + 1].s) {
                swap(v[j], v[j + 1]);
            }
        }
    }

    for (int i = 0; i < k; ++i)
        cout << v[i].s << ' ' << v[i].a1 << ' ' << v[i].a2 << ' ' << v[i].a3 << ' ' << v[i].a4 << ' ' << v[i].a5 << ' ';
}